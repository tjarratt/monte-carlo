#!/usr/bin/env elixir

stories_remaining = 54
desired_release_date = ~D[2025-09-08]
tickets_per_week = [5, 4, 4, 6, 9, 8, 7, 11, 5]
num_simulations = 10_000 

Code.require_file "./lib/montecarlo_simulation.ex"

working_days = Date.range(Date.utc_today(), desired_release_date) |> Enum.map(& Date.day_of_week/1) |> Enum.filter(& &1 <= 5) |> length()

results =
  1..num_simulations
  |> Enum.reduce(%{}, fn _day, acc ->
    days_to_complete = MonteCarloSimulation.forecast(0, stories_remaining, tickets_per_week)

    Map.update(acc, days_to_complete, 1, fn existing_count -> existing_count + 1 end)
  end)
  |> Map.to_list()
  |> Enum.group_by(fn {days_elapsed, _occurrences} ->
    if days_elapsed <= working_days do
      :on_time
    else
      :late
    end
  end)

on_time = Map.get(results, :on_time, [])
late = Map.get(results, :late, [])

IO.puts("Goal : deliver #{stories_remaining} stories before #{desired_release_date}")
IO.puts("")
IO.puts("We will deliver on-time #{MonteCarloSimulation.percent(on_time, num_simulations)} % of the time")
IO.puts("We will deliver late    #{MonteCarloSimulation.percent(late, num_simulations)} % of the time")
